{"version":3,"file":"static/js/661.ff1c670b.chunk.js","mappings":"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","sources":["components/HOCs/infiniteScroll.js","selectors/gamesSelector.js","pages/Games.js"],"sourcesContent":["import React, { useEffect } from 'react';\n\nconst infiniteScroll = (Component, debounce = 0) => {\n  const InnerComponent = props => {\n    const { nextUrl, fetchGamesOnNeed, collectionKey } = props;\n    useEffect(() => {\n      const handleScroll = () => {\n        if (\n          window.innerHeight + window.scrollY >=\n          document.body.offsetHeight - 50\n        ) {\n          setTimeout(() => {\n            fetchGamesOnNeed(nextUrl, collectionKey);\n          }, debounce);\n        }\n      };\n\n      window.addEventListener('scroll', handleScroll);\n\n      return () => {\n        window.removeEventListener('scroll', handleScroll);\n      };\n    }, [nextUrl, collectionKey, fetchGamesOnNeed]);\n\n    return <Component {...props} />;\n  };\n  return InnerComponent;\n};\n\nexport default infiniteScroll;\n","import { createSelector } from '@reduxjs/toolkit';\nimport {\n  getGames,\n  getParamKey,\n  getParamValue,\n  getRouter\n} from './globalSelector';\nimport {\n  GAME_COLLECTION,\n  GAME_COLLECTION_SEARCH,\n  GAME_COLLECTION_TAG,\n  GAME_COLLECTION_GENRE,\n  GENRES\n} from 'src/constants/global';\nimport { selectGameCollectionByKey } from 'src/slices/gamesSlice';\n\nconst gameCollectionKey = (key, value) => {\n  if (key) {\n    if (key === 'search') {\n      return [GAME_COLLECTION_SEARCH, value].join('|');\n    }\n    if (key === 'tags') {\n      return [GAME_COLLECTION_TAG, value].join('|');\n    }\n    if (key === 'genres') {\n      return [GAME_COLLECTION_GENRE, value].join('|');\n    }\n  }\n  return [GAME_COLLECTION, 'default'].join('|');\n};\n\nexport const gameCollectionData = state => {\n  const paramKey = getParamKey(state);\n  const paramValue = getParamValue(state);\n  const collectionKey = gameCollectionKey(paramKey, paramValue);\n  const data = selectGameCollectionByKey(state, collectionKey);\n  return { collectionKey, ...data };\n};\n\nexport const getGameCollectionData = createSelector(\n  getGames,\n  getRouter,\n  gameCollectionData,\n  (\n    { error, loading },\n    { search, pathname },\n    { games, nextUrl, collectionKey }\n  ) => ({\n    error,\n    loading,\n    games,\n    collectionKey,\n    nextUrl,\n    gamesUrl: search ? pathname + search : pathname,\n    genres: GENRES\n  })\n);\n","import React, { useEffect } from 'react';\nimport { fetchGamesOnStart, fetchGamesOnNeed } from 'src/slices/gamesSlice';\nimport { RenderGames, Error, Loader, Genres } from 'src/components';\nimport infiniteScroll from 'src/components/HOCs/infiniteScroll';\nimport { getGameCollectionData } from 'src/selectors/gamesSelector';\nimport { connect } from 'react-redux';\n\nconst Games = props => {\n  const {\n    error,\n    loading,\n    games,\n    collectionKey,\n    gamesUrl,\n    fetchGamesOnStart,\n    genres\n  } = props;\n\n  useEffect(() => {\n    const controller = new AbortController();\n    fetchGamesOnStart(gamesUrl, collectionKey, controller.signal);\n\n    return () => controller.abort();\n  }, [gamesUrl, collectionKey, fetchGamesOnStart]);\n\n  if (error) {\n    return <Error classname=\"error\" message={error} />;\n  }\n\n  return (\n    <div className=\"game-list\" style={{ width: '100%' }}>\n      <Genres genres={genres} classname=\"genre-list\" />\n      <RenderGames games={games} />\n      <Loader isLoading={loading} classname=\"loader\" />\n    </div>\n  );\n};\n\nexport default connect(\n  state => ({\n    ...getGameCollectionData(state)\n  }),\n  { fetchGamesOnStart, fetchGamesOnNeed }\n)(infiniteScroll(Games));\n"],"names":["Component","debounce","arguments","length","undefined","props","nextUrl","fetchGamesOnNeed","collectionKey","useEffect","handleScroll","window","innerHeight","scrollY","document","body","offsetHeight","setTimeout","addEventListener","removeEventListener","_jsx","_objectSpread","getGameCollectionData","createSelector","getGames","getRouter","state","key","value","GAME_COLLECTION_SEARCH","join","GAME_COLLECTION_TAG","GAME_COLLECTION_GENRE","GAME_COLLECTION","gameCollectionKey","getParamKey","getParamValue","data","selectGameCollectionByKey","_ref","_ref2","_ref3","error","loading","search","pathname","games","gamesUrl","genres","GENRES","connect","fetchGamesOnStart","infiniteScroll","controller","AbortController","signal","abort","Error","classname","message","_jsxs","className","style","width","children","Genres","RenderGames","Loader","isLoading"],"sourceRoot":""}