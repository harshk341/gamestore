{"version":3,"file":"static/js/231.26184998.chunk.js","mappings":"kOAIaA,GAA4BC,EAAAA,EAAAA,IACvCC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,IACA,SAACC,EAAOC,EAAMC,GAAW,MAAM,CAC7BD,KAAAA,EACAC,YAAAA,EACAC,QAASH,EAAMG,QACfC,MAAOJ,EAAMI,MACd,I,SCqBH,EA3Ba,WACX,IAcIC,EAdEC,GAAWC,EAAAA,EAAAA,MACTC,GAASC,EAAAA,EAAAA,aAATD,KACRE,GAA8CC,EAAAA,EAAAA,KAAY,SAAAX,GAAK,OAC7DL,EAA0BK,EAAOQ,EAAK,IADhCP,EAAIS,EAAJT,KAAMC,EAAWQ,EAAXR,YAAaC,EAAOO,EAAPP,QAASC,EAAKM,EAALN,MAqBpC,OAjBAQ,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,IAAIC,gBAIvB,OAFAR,GAASS,EAAAA,EAAAA,IAAgBP,EAAMK,EAAWG,SAEnC,kBAAMH,EAAWI,OAAQ,CAClC,GAAG,CAACT,EAAMF,IAGNH,EACFE,GAAUa,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CAACC,UAAU,SAASC,UAAWlB,IACvCF,GAAQC,EACjBG,GAAUa,EAAAA,EAAAA,KAACI,EAAAA,GAAU,CAACrB,KAAMA,EAAMC,YAAaA,IACtCE,IACTC,GAAUa,EAAAA,EAAAA,KAACK,EAAAA,GAAK,CAACH,UAAU,QAAQI,QAASpB,MAGvCc,EAAAA,EAAAA,KAAA,OAAKO,UAAU,OAAMC,SAAErB,GAChC,C","sources":["selectors/gameSelector.js","pages/Game.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\nimport { selectGame } from 'src/slices/gameSlice';\nimport { getGameScreenshots, getvisitedGames } from './globalSelector';\n\nexport const selectGameWithScreenshots = createSelector(\n  getvisitedGames,\n  selectGame,\n  getGameScreenshots,\n  (state, game, screenshots) => ({\n    game,\n    screenshots,\n    loading: state.loading,\n    error: state.error\n  })\n);\n","import React, { useEffect } from 'react';\nimport { Error, Loader, RenderGame } from 'src/components';\nimport { useParams } from 'react-router-dom';\nimport { fetchSingleGame } from 'src/slices/gameSlice';\nimport { useDispatch, useSelector } from 'src/store';\nimport { selectGameWithScreenshots } from 'src/selectors/gameSelector';\n\nconst Game = () => {\n  const dispatch = useDispatch();\n  const { slug } = useParams();\n  const { game, screenshots, loading, error } = useSelector(state =>\n    selectGameWithScreenshots(state, slug)\n  );\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    dispatch(fetchSingleGame(slug, controller.signal));\n\n    return () => controller.abort();\n  }, [slug, dispatch]);\n\n  let content;\n  if (loading) {\n    content = <Loader classname=\"loader\" isLoading={loading} />;\n  } else if (game && screenshots) {\n    content = <RenderGame game={game} screenshots={screenshots} />;\n  } else if (error) {\n    content = <Error classname=\"error\" message={error} />;\n  }\n\n  return <div className=\"game\">{content}</div>;\n};\n\nexport default Game;\n"],"names":["selectGameWithScreenshots","createSelector","getvisitedGames","selectGame","getGameScreenshots","state","game","screenshots","loading","error","content","dispatch","useDispatch","slug","useParams","_useSelector","useSelector","useEffect","controller","AbortController","fetchSingleGame","signal","abort","_jsx","Loader","classname","isLoading","RenderGame","Error","message","className","children"],"sourceRoot":""}